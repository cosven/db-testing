apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: systesting--upgrade-test--env-prepare
spec:
  params:
    - name: run-id
      type: string
  workspaces:
  - name: manifest
    mountPath: /adhoc-manifests
  steps:
  - name: generate-manifest
    image: hub.pingcap.net/qa/kubetools:20200730
    script: |
      #!/usr/bin/env bash
      echo "generating resources manifest..."
      cat <<EOF > "$(workspaces.manifest.path)/resources.yaml"
      apiVersion: naglfar.pingcap.com/v1
      kind: TestResourceRequest
      metadata:
        name: $(params.run-id)
      spec:
        items:
          - name: workload
            spec:
              memory: 16GB
              cores: 8
          - name: ctl
            spec:
              memory: 8GB
              cores: 4
          - name: proxy
            spec:
              memory: 16GB
              cores: 8
          - name: db-pd-1
            spec:
              memory: 16GB
              cores: 16
          - name: db-pd-2
            spec:
              memory: 16GB
              cores: 16
          - name: db-pd-3
            spec:
              memory: 16GB
              cores: 16
          - name: kv1
            spec:
              memory: 8GB
              cores: 8
              disks:
                disk1:
                  kind: nvme
                  size: 3TB
                  mountPath: /disk1
          - name: kv2
            spec:
              memory: 8GB
              cores: 8
              disks:
                disk1:
                  kind: nvme
                  size: 3TB
                  mountPath: /disk1
          - name: kv3
            spec:
              memory: 8GB
              cores: 8
              disks:
                disk1:
                  kind: nvme
                  size: 3TB
                  mountPath: /disk1
          - name: kv4
            spec:
              memory: 8GB
              cores: 8
              disks:
                disk1:
                  kind: nvme
                  size: 3TB
                  mountPath: /disk1
      EOF
      echo "generating resources manifest...done"
      cat "$(workspaces.manifest.path)/resources.yaml"

      echo "generating cluster manifest..."
      cat <<EOF > "$(workspaces.manifest.path)/cluster.yaml"
      apiVersion: naglfar.pingcap.com/v1
      kind: TestClusterTopology
      metadata:
        name: $(params.run-id)
      spec:
        resourceRequest: $(params.run-id)
        tidbCluster:
          global:
            deployDir: "/disk1/deploy"
            dataDir: "/disk1/data"
          version:
            version: v5.0.0-rc
          tikv:
            - host: kv1
            - host: kv2
            - host: kv3
            - host: kv4
          tidb:
            - host: db-pd-1
            - host: db-pd-2
            - host: db-pd-3
          pd:
            - host: db-pd-1
            - host: db-pd-2
            - host: db-pd-3
          control: ctl
          monitor:
            - host: ctl
              port: 9090
          grafana:
            - host: ctl
              port: 3000
          haProxy:
            host: proxy
            port: 3306
            version: 2.0.20
            config: |-
              global
                daemon
                maxconn 4000
                nbproc 8
              defaults
                retries 2
                timeout connect 2s
                timeout client  30000s
                timeout server  30000s
              listen admin_stats
                bind 0.0.0.0:8080
                mode http
                option httplog
                stats refresh 30s
                stats realm Haproxy
                stats uri /haproxy
                stats auth admin:admin
      EOF
      echo "generating cluster manifest...done"
      cat "$(workspaces.manifest.path)/cluster.yaml"
  - name: apply-resources
    image: hub.pingcap.net/qa/kubetools:20200730
    script: |
      #!/usr/bin/env bash
      set -ex
      kubectl apply -f "$(workspaces.manifest.path)/resources.yaml"
      kubectl apply -f "$(workspaces.manifest.path)/cluster.yaml"
  - name: wait-until-cluster-started
    image: hub.pingcap.net/qa/kubetools:20200730
    script: |
      #!/usr/bin/env bash
      while true
      do
        state=`kubectl get tct "$(params.run-id)" -ojsonpath='{.status.state}' || echo unknown`
        echo "current resource state: $state"
        if [ "ready" = "$state" ]; then
            break
        fi
        echo "test resources isn't ready now, wait another 10s..."
        sleep 10
      done
