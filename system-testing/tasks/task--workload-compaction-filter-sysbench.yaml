apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: st--workload-compaction-filter-sysbench
spec:
  params:
    # test resouces info, including tidb cluster and workload
    - name: res-ns
      type: string

    # tidb cluster
    - name: tct-name
      type: string

    # workload info
    - name: trr-name
      type: string
    - name: workload-script-b64
      type: string
      default: ""

  workspaces:
  - name: manifest
    mountPath: /adhoc-manifests

  steps:
  - name: generate-run-manifest
    image: hub.pingcap.net/qa/kubetools:20200730
    script: |
      #!/usr/bin/env bash
      echo "generating worload manifest..."
      cat <<EOF > "$(workspaces.manifest.path)/run.yaml"
      apiVersion: naglfar.pingcap.com/v1
      kind: TestWorkload
      metadata:
        name: "$(context.task.name)"
      spec:
        clusterTopologies:
          - name: "$(params.tct-name)"
            aliasName: cluster
        workloads:
          - name: workload-1
            dockerContainer:
              resourceRequest:
                name: "$(params.trr-name)"
                node: workload
              image: hub.pingcap.net/system-testing/compaction-filter-sysbench:210304
              imagePullPolicy: Always
              command:
                - /bin/bash
                - -c
                - |
                  echo "Generating script.sh"
                  echo "$(params.workload-script-b64)" | base64 -d > script.sh
                  cat script.sh
                  echo "Run script.sh"
                  bash script.sh
      EOF
      echo "generating worload manifest...done"
      cat "$(workspaces.manifest.path)/run.yaml"
  - name: workload-tail-f
    image: hub.pingcap.net/qa/kubetools:20200730
    script: |
      #!/usr/bin/env bash
      set -xe
      shopt -s expand_aliases
      twName="$(context.task.name)"
      namespace="$(params.res-ns)"
      echo "ensure test-workload($twName) does not exists"
      alias kubectl="kubectl -n $namespace"
      exists=`kubectl get tw $twName >/dev/null && echo "yes" || echo "no"`
      if [ "$exists" == "yes" ]; then
        echo "test workload($twName) already exists, delete it."
        kubectl delete tw $twName
      fi

      echo "create test-workload($twName)..."
      kubectl apply -f "$(workspaces.manifest.path)/run.yaml" -n $namespace
      while true
      do
        state=`kubectl get tw "$twName" -ojsonpath='{.status.state}' || echo pending`
        echo "current workload state: $state"
        if [ "succeeded" == "$state" ]; then
          break
        elif [ "failed" == "$state" ]; then
          break
        elif [ "running" == "$state" ]; then
          break
        fi
        echo "workload wait another 5s"
        sleep 5
      done
      curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/PingCAP-QE/Naglfar/master/scripts/kubectl-naglfar-installer.sh | sh
      ~/.Naglfar/bin/naglfar logs $twName -n $namespace --follow
      kubectl delete tw $twName -n $namespace
